Description: >

    This template deploys a VPC, with a pair of public and private subnets
    spread across two Availabilty Zones. It deploys an Internet Gateway, with a
    default route on the public subnets. It deploys a pair of NAT Gateways
    (one in each AZ), and default routes for them in the private subnets.

    It then deploys a "hello world" application highly available ECS cluster
    using Fargate containers.

    Finally, it deploys an  ECS services from containers published in Amazon EC2
    Container Registry (Amazon ECR).

Parameters:
    S3TemplateKeyPrefix:
        Description: >
            An S3 key prefix which will be used to resolve referenced templates
        Type: String
    GitHubBranch:
        Type: String
    GitHubUser:
        Type: String
    GitHubRepo:
        Type: String
    GitHubToken:
        Type: String
    RailsSecretKeyBase:
        Type: String

Resources:

    ############################################################################
    # ECR
    ############################################################################

    ImageRepository:
        Type: "AWS::ECR::Repository"
        Properties:
            RepositoryName: !Ref AWS::StackName
            RepositoryPolicyText:
                Version: "2012-10-17"
                Statement:
                    -
                        Sid: AllowPushPull
                        Effect: Allow
                        Principal:
                            AWS:
                                !Ref AWS::AccountId
                        Action:
                            - "ecr:*"
                            - "ecr:GetAuthorizationToken"

    ############################################################################
    # RDS
    ############################################################################

    Database:
        Type: AWS::RDS::DBInstance
        Properties:
            AllocatedStorage: 5
            AutoMinorVersionUpgrade: true
            BackupRetentionPeriod: 0
            DBInstanceClass: db.t2.micro
            DBName: !Ref AWS::StackName
            VPCSecurityGroups:
                - !Ref RDSInstanceSecurityGroup
            DBSubnetGroupName: !GetAtt VPC.Outputs.DBSubnetGroup
            Engine: postgres
            EngineVersion: 9.6.5
            MasterUsername: rinkydink
            MasterUserPassword: smurfmagnet
            MultiAZ: true

    ############################################################################
    # Security Groups
    ############################################################################

    RDSInstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the RDS instance
            SecurityGroupIngress:
                # Only allow inbound access to RDS from ECS. This will need to
                # change if we add a bastion host.
                - SourceSecurityGroupId: !Ref ECSServicesSecurityGroup
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-RDS-Instances

    ECSServicesSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
            SecurityGroupIngress:
                # Only allow inbound access to ECS from the ELB
                - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-ECS-Services

    LoadBalancerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            VpcId: !Ref VPC
            GroupDescription: Access to the load balancer that sits in front of ECS
            SecurityGroupIngress:
                # Allow access from anywhere to our ECS services
                - CidrIp: 0.0.0.0/0
                  IpProtocol: -1
            Tags:
                - Key: Name
                  Value: !Sub ${AWS::StackName}-LoadBalancers

    ############################################################################
    # Security Groups
    ############################################################################

    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}vpc.yml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.0.0.0/16
                PublicSubnet1CIDR:  10.0.10.0/24
                PublicSubnet2CIDR:  10.0.11.0/24
                PrivateSubnet1CIDR: 10.0.20.0/24
                PrivateSubnet2CIDR: 10.0.21.0/24

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}load-balancers.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !Ref LoadBalancerSecurityGroup



    EcsCluster:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}ecs-cluster.yml
            Parameters:
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Listener: !GetAtt ALB.Outputs.Listener
                ECSServicesSecurityGroup: !Ref ECSServicesSecurityGroup
                DBURL: !Sub postgresql://rinkydink:smurfmagnet@${Database.Endpoint.Address}:${Database.Endpoint.Port}/${AWS::StackName}
                RailsSecretKeyBase: !Ref RailsSecretKeyBase

    DeploymentPipeline:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}deployment-pipeline.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                ClusterName: !GetAtt EcsCluster.Outputs.EcsClusterName
                ServiceArn: !GetAtt EcsCluster.Outputs.EcsServiceArn
                RepositoryArn: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${ImageRepository}
                RepositoryUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageRepository}
                GitHubUser: !Ref GitHubUser
                GitHubBranch: !Ref GitHubBranch
                GitHubRepo: !Ref GitHubRepo
                GitHubToken: !Ref GitHubToken

Outputs:

    WebServiceUrl:
        Description: The URL of the load balancer
        Value: !Sub http://${ALB.Outputs.LoadBalancerUrl}

    PipelineUrl:
        Description: The continuous deployment pipeline in the AWS Management Console.
        Value: !GetAtt DeploymentPipeline.Outputs.PipelineUrl
