Description: >

    This template deploys a VPC, with a pair of public and private subnets
    spread across two Availabilty Zones. It deploys an Internet Gateway, with a
    default route on the public subnets. It deploys a pair of NAT Gateways
    (one in each AZ), and default routes for them in the private subnets.

    It then deploys a "hello world" application highly available ECS cluster
    using Fargate containers.

    Finally, it deploys an  ECS services from containers published in Amazon EC2
    Container Registry (Amazon ECR).

Parameters:
    S3TemplateKeyPrefix:
        Description: >
            An S3 key prefix which will be used to resolve referenced templates
        Type: String

    DBMasterUsername:
        Description: The master username for our RDS instance
        Type: String
        Default: rinkydink

    DBMasterUserPassword:
        Description: The master password for our RDS instance
        Type: String
        Default: smurfmagnet

Resources:
    VPC:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}vpc.yml
            Parameters:
                EnvironmentName:    !Ref AWS::StackName
                VpcCIDR:            10.0.0.0/16
                PublicSubnet1CIDR:  10.0.8.0/21
                PublicSubnet2CIDR:  10.0.16.0/21
                PrivateSubnet1CIDR: 10.0.24.0/21
                PrivateSubnet2CIDR: 10.0.32.0/21

    SecurityGroups:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}security-groups.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC

    ALB:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}load-balancers.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                Subnets: !GetAtt VPC.Outputs.PublicSubnets
                SecurityGroup: !GetAtt SecurityGroups.Outputs.LoadBalancerSecurityGroup

    Database:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}database.yml
            Parameters:
                EnvironmentName: !Ref AWS::StackName
                SecurityGroup: !GetAtt SecurityGroups.Outputs.RDSInstanceSecurityGroup
                MasterUsername: !Ref DBMasterUsername
                MasterUserPassword: !Ref DBMasterUserPassword
                DBSubnetGroupName: !GetAtt VPC.Outputs.DBSubnetGroup

    WebService:
        Type: AWS::CloudFormation::Stack
        Properties:
            TemplateURL: !Sub ${S3TemplateKeyPrefix}service.yml
            Parameters:
                Subnets: !GetAtt VPC.Outputs.PrivateSubnets
                EnvironmentName: !Ref AWS::StackName
                VPC: !GetAtt VPC.Outputs.VPC
                DesiredCount: 2
                Listener: !GetAtt ALB.Outputs.Listener
                Path: /
                SecurityGroup: !GetAtt SecurityGroups.Outputs.ECSHostSecurityGroup
                DBURL: !GetAtt Database.Outputs.DBURL

Outputs:
    WebServiceUrl:
        Description: The URL endpoint for the helloworld service
        Value: !GetAtt ALB.Outputs.LoadBalancerUrl

    WebServiceStackName:
        Description: The name of the stack containing our Web Service
        Value: !GetAtt WebService.Outputs.StackName

    WebServiceArn:
        Description: The ARN of the created service
        Value: !GetAtt WebService.Outputs.EcsServiceArn

    WebServiceTaskExecutionRoleArn:
        Description: The ARN of the TaskExecutionRole used by ECS
        Value: !GetAtt WebService.Outputs.EcsTaskExecutionRoleArn

    DBURL:
        Description: URL used to connect to the RDS instance
        Value: !GetAtt Database.Outputs.DBURL
