Description: >
    This is an example of a long running ECS service that responds to HTTP
    requests with a single word.

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    DesiredCount:
        Description: >
            How many instances of this task should we run across our cluster?
        Type: Number

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    EnvironmentName:
        Description: >
            An environment name that will be prefixed to (or used to create)
            resource names
        Type: String

    Subnets:
        Description: >
            Choose which subnets the Application Load Balancer should be
            deployed to
        Type: List<AWS::EC2::Subnet::Id>

    ECSServicesSecurityGroup:
        Description: >
            Select a security group which permits access to the ECS tasks
        Type: AWS::EC2::SecurityGroup::Id

    DBURL:
        Description: >
            A Postgres URL that the application will use to connect to the RDS
            instance
        Type: String

Resources:

    Cluster:
        Type: AWS::ECS::Cluster
        Properties:
            ClusterName: !Ref EnvironmentName

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            LaunchType: FARGATE
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            NetworkConfiguration:
                AwsvpcConfiguration:
                    Subnets: !Ref Subnets
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref ECSServicesSecurityGroup
            LoadBalancers:
                - ContainerName: !Sub ${EnvironmentName}-WebService
                  ContainerPort: 4444
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            TaskRoleArn: !GetAtt TaskExecutionRole.Arn
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            Cpu: 256
            Memory: 512
            Family: !Sub ${EnvironmentName}-WebService
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
            ContainerDefinitions:
                - Name: !Sub ${EnvironmentName}-WebService
                  Command:
                      - !Sub "rails db:migrate && rails assets:precompile && rails server -p 4444 -b 0.0.0.0"
                  Environment:
                      - Name: RAILS_SERVE_STATIC_FILES
                        Value: true
                      - Name: RAILS_LOG_TO_STDOUT
                        Value: true
                      - Name: RAILS_ENV
                        Value: production
                      - Name: DATABASE_URL
                        Value: !Ref DBURL
                      - Name: SECRET_KEY_BASE
                        Value: 72971829c1b11f427d6539a5340eff94f61e5ab19c38ed01a08d0290280189fb83f4fd07735fd8e69c1eed6de2fdab789dbbad6afbe4225de02cb6895aff8bba
                  Essential: true

                  # TODO: replace below with a Parameter
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}:latest

                  PortMappings:
                      - ContainerPort: 4444
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Sub ${EnvironmentName}-WebService
                          awslogs-region: !Ref AWS::Region
                          awslogs-stream-prefix: ecs

    LogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub ${EnvironmentName}-WebService
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 120
            HealthCheckPath: /posts
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 60
            HealthyThresholdCount: 2
            TargetType: ip

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                    - "*"
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    TaskExecutionRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                - Effect: Allow
                  Principal:
                      Service:
                      - ecs-tasks.amazonaws.com
                  Action:
                  - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

Outputs:

    EcsServiceArn:
        Description: A reference to the created ECS service ARN
        Value: !Ref Service

    EcsTaskExecutionRoleArn:
        Description: A reference to the created IAM role ARN
        Value: !Ref TaskExecutionRole

    WebServiceLogGroupName:
        Description: The name of the CloudWatch log group for our web service
        Value: !Sub ${EnvironmentName}-WebService

    WebServiceContainerName:
        Description: The name of the container in which our web service runs
        Value: !Sub ${EnvironmentName}-WebService

    WebServiceTaskFamilyName:
        Description: The name task family for the web service
        Value: !Sub ${EnvironmentName}-WebService
