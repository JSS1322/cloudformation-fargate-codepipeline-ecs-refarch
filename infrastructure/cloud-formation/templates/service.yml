Description: >
    This is an example of a long running ECS service that responds to HTTP requests with a single word.

Parameters:

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    Path:
        Description: The path to register with the Application Load Balancer
        Type: String
        Default: /

    EnvironmentName:
        Description: An environment name that will be prefixed to (or used to create) resource names
        Type: String

    Subnets:
        Description: Choose which subnets the Application Load Balancer should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select a security group which permits access to the ECS tasks
        Type: AWS::EC2::SecurityGroup::Id

Resources:

    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !Ref Cluster
            LaunchType: "FARGATE"
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            NetworkConfiguration:
                AwsvpcConfiguration:
                    Subnets: !Ref Subnets
                    AssignPublicIp: ENABLED
                    SecurityGroups:
                        - !Ref SecurityGroup

            LoadBalancers:
                - ContainerName: "helloworld-service"
                  ContainerPort: 4444
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            TaskRoleArn: !GetAtt TaskExecutionRole.Arn
            ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
            Cpu: 1024
            Memory: 2048
            Family: helloworld-service
            NetworkMode: awsvpc
            RequiresCompatibilities:
                - FARGATE
            ContainerDefinitions:
                - Name: helloworld-service
                  Environment:
                      - Name: PORT
                        Value: 4444
                  Essential: true

                  # TODO: replace below with a Parameter
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EnvironmentName}:latest

                  PortMappings:
                      - ContainerPort: 4444
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref AWS::StackName
                          awslogs-region: !Ref AWS::Region
                          awslogs-stream-prefix: ecs

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !Ref VPC
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            TargetType: ip
            TargetGroupAttributes:
                - Key: deregistration_delay.timeout_seconds
                  Value: '20'

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values:
                    - !Ref Path
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    TaskExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - ecs-tasks.amazonaws.com
            Action:
            - sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

Outputs:

    StackName:
        Description: The name of the created stack
        Value: !Ref AWS::StackName

    ServiceArn:
        Description: The ARN of the created service
        Value: !Ref Service

    TaskExecutionRoleArn:
        Description: The ARN of the role used with the TaskDefinition
        Value: !Ref TaskExecutionRole